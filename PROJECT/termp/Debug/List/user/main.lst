###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         07/Dec/2022  03:28:43
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\main.c
#    Command line      =
#        -f
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user\main.o.rsp
#        (C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\List\user
#        -o
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\inc\
#        -Ol -I "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user\main.o.d
#    Locale            =  C
#    List file         =
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\List\user\main.lst
#    Object file       =
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user\main.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\main.c
      1          #include "stm32f10x.h"
      2          
      3          #define RCC_APB2_ENR *(volatile unsigned int *)0x40021018
      4          #define GPIOB_CRH *(volatile unsigned int *)0x40010C04
      5          #define GPIOC_CRL *(volatile unsigned int *)0x40011000
      6          #define GPIOD_CRL *(volatile unsigned int *)0x40011400
      7          #define GPIOD_BSRR *(volatile unsigned int *)0x40011410
      8          #define GPIOC_IDR *(volatile unsigned int *)0x40011008
      9          #define GPIOB_IDR *(volatile unsigned int *)0x40010C08
     10          #define GPIOD_ODR *(volatile unsigned int *)0x4001140C
     11          

   \                                 In section .text, align 4, keep-with-next
     12          int main() {
   \                     main: (+1)
   \        0x0   0xB410             PUSH     {R4}
     13            
     14            RCC_APB2_ENR = 0x00000038; // IO Port B, C, D Enable
   \        0x2   0x2038             MOVS     R0,#+56
   \        0x4   0x493E             LDR.N    R1,??main_0
   \        0x6   0x6008             STR      R0,[R1, #+0]
     15            
     16            GPIOB_CRH = 0x44444444; // GPIO B Reset
   \        0x8   0x483E             LDR.N    R0,??main_0+0x4
   \        0xA   0xF05F 0x3144      MOVS     R1,#+1145324612
   \        0xE   0x6001             STR      R1,[R0, #+0]
     17            GPIOC_CRL = 0x44444444; // GPIO C Reset
   \       0x10   0x4A3D             LDR.N    R2,??main_0+0x8
   \       0x12   0x6011             STR      R1,[R2, #+0]
     18            GPIOD_CRL = 0x44444444; // GPIO D Reset
   \       0x14   0x4B3D             LDR.N    R3,??main_0+0xC
   \       0x16   0x6019             STR      R1,[R3, #+0]
     19            
     20            GPIOB_CRH = 0x44444448; // PB8 Set
   \       0x18   0x493D             LDR.N    R1,??main_0+0x10
   \       0x1A   0x6001             STR      R1,[R0, #+0]
     21            GPIOC_CRL = 0x44888844; // PC2, PC3, PC4, PC5 Set
   \       0x1C   0x483D             LDR.N    R0,??main_0+0x14
   \       0x1E   0x6010             STR      R0,[R2, #+0]
     22            GPIOD_CRL = 0x34433344; // PD2, PD3, PD4, PD7 Set
   \       0x20   0x483D             LDR.N    R0,??main_0+0x18
   \       0x22   0x6018             STR      R0,[R3, #+0]
     23            GPIOD_BSRR = 0x00000000; // Port bit Reset
   \       0x24   0x493D             LDR.N    R1,??main_0+0x1C
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x6008             STR      R0,[R1, #+0]
     24            
     25            int isSelect = 0;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xE004             B.N      ??main_1
     26            
     27            while (1) {
     28              
     29              if (GPIOC_IDR == 0x0000FFDF) { // UP
     30                GPIOD_BSRR |= 0x00000090; // PD4, PD7 LED ON
   \                     ??main_2: (+1)
   \       0x2E   0x6808             LDR      R0,[R1, #+0]
   \       0x30   0xF050 0x0090      ORRS     R0,R0,#0x90
   \       0x34   0x6008             STR      R0,[R1, #+0]
     31                isSelect = 0;
   \       0x36   0x2000             MOVS     R0,#+0
     32              }
   \                     ??main_1: (+1)
   \       0x38   0x4A39             LDR.N    R2,??main_0+0x20
   \       0x3A   0x6813             LDR      R3,[R2, #+0]
   \       0x3C   0xF64F 0x74DF      MOVW     R4,#+65503
   \       0x40   0x42A3             CMP      R3,R4
   \       0x42   0xD0F4             BEQ.N    ??main_2
     33              else if (GPIOC_IDR == 0x0000FFFB) { // DOWN
   \       0x44   0x6813             LDR      R3,[R2, #+0]
   \       0x46   0xF64F 0x74FB      MOVW     R4,#+65531
   \       0x4A   0x42A3             CMP      R3,R4
   \       0x4C   0xD105             BNE.N    ??main_3
     34                GPIOD_BSRR |= 0x00900000; // PD4, PD7 LED OFF
   \       0x4E   0x6808             LDR      R0,[R1, #+0]
   \       0x50   0xF450 0x0010      ORRS     R0,R0,#0x900000
   \       0x54   0x6008             STR      R0,[R1, #+0]
     35                isSelect = 0;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xE7EE             B.N      ??main_1
     36              }
     37              else if (GPIOC_IDR == 0x0000FFF7) { // LEFT
   \                     ??main_3: (+1)
   \       0x5A   0x6813             LDR      R3,[R2, #+0]
   \       0x5C   0xF64F 0x74F7      MOVW     R4,#+65527
   \       0x60   0x42A3             CMP      R3,R4
   \       0x62   0xD105             BNE.N    ??main_4
     38                GPIOD_BSRR |= 0x0000000C; // PD2, PD3 LED ON
   \       0x64   0x6808             LDR      R0,[R1, #+0]
   \       0x66   0xF050 0x000C      ORRS     R0,R0,#0xC
   \       0x6A   0x6008             STR      R0,[R1, #+0]
     39                isSelect = 0;
   \       0x6C   0x2000             MOVS     R0,#+0
   \       0x6E   0xE7E3             B.N      ??main_1
     40              }
     41              else if (GPIOC_IDR == 0x0000FFEF) { // RIGHT
   \                     ??main_4: (+1)
   \       0x70   0x6812             LDR      R2,[R2, #+0]
   \       0x72   0xF64F 0x73EF      MOVW     R3,#+65519
   \       0x76   0x429A             CMP      R2,R3
   \       0x78   0xD105             BNE.N    ??main_5
     42                GPIOD_BSRR |= 0x000C0000; // PD2, PD3 LED OFF
   \       0x7A   0x6808             LDR      R0,[R1, #+0]
   \       0x7C   0xF450 0x2040      ORRS     R0,R0,#0xC0000
   \       0x80   0x6008             STR      R0,[R1, #+0]
     43                isSelect = 0;
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0xE7D8             B.N      ??main_1
     44              }
     45              else if ( (((~GPIOB_IDR) << 16) & 0x01000000) && !isSelect ) { // SELECT
   \                     ??main_5: (+1)
   \       0x86   0x4A27             LDR.N    R2,??main_0+0x24
   \       0x88   0x6812             LDR      R2,[R2, #+0]
   \       0x8A   0x43D2             MVNS     R2,R2
   \       0x8C   0xF3C2 0x2200      UBFX     R2,R2,#+8,#+1
   \       0x90   0x0612             LSLS     R2,R2,#+24
   \       0x92   0x01D2             LSLS     R2,R2,#+7
   \       0x94   0xD5D0             BPL.N    ??main_1
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xD1CE             BNE.N    ??main_1
     46                if (GPIOD_ODR & 0x00000004) { // IF PD2 LED ON
   \       0x9A   0x4823             LDR.N    R0,??main_0+0x28
   \       0x9C   0x6802             LDR      R2,[R0, #+0]
   \       0x9E   0x0752             LSLS     R2,R2,#+29
   \       0xA0   0xD504             BPL.N    ??main_6
     47                  GPIOD_BSRR |= 0x00040000; // PD2 LED OFF
   \       0xA2   0x680A             LDR      R2,[R1, #+0]
   \       0xA4   0xF452 0x2280      ORRS     R2,R2,#0x40000
   \       0xA8   0x600A             STR      R2,[R1, #+0]
   \       0xAA   0xE003             B.N      ??main_7
     48                }
     49                else { // IF PD2 LED OFF
     50                  GPIOD_BSRR |= 0x00000004; // PD2 LED ON
   \                     ??main_6: (+1)
   \       0xAC   0x680A             LDR      R2,[R1, #+0]
   \       0xAE   0xF052 0x0204      ORRS     R2,R2,#0x4
   \       0xB2   0x600A             STR      R2,[R1, #+0]
     51                }
     52                  
     53                if (GPIOD_ODR & 0x00000008) { // IF PD3 LED ON
   \                     ??main_7: (+1)
   \       0xB4   0x6802             LDR      R2,[R0, #+0]
   \       0xB6   0x0712             LSLS     R2,R2,#+28
   \       0xB8   0xD504             BPL.N    ??main_8
     54                  GPIOD_BSRR |= 0x00080000; // PD3 LED OFF
   \       0xBA   0x680A             LDR      R2,[R1, #+0]
   \       0xBC   0xF452 0x2200      ORRS     R2,R2,#0x80000
   \       0xC0   0x600A             STR      R2,[R1, #+0]
   \       0xC2   0xE003             B.N      ??main_9
     55                }
     56                else { // IF PD3 LED OFF
     57                  GPIOD_BSRR |= 0x00000008; // PD3 LED ON
   \                     ??main_8: (+1)
   \       0xC4   0x680A             LDR      R2,[R1, #+0]
   \       0xC6   0xF052 0x0208      ORRS     R2,R2,#0x8
   \       0xCA   0x600A             STR      R2,[R1, #+0]
     58                }
     59                  
     60                if (GPIOD_ODR & 0x00000010) { // IF PD4 LED ON
   \                     ??main_9: (+1)
   \       0xCC   0x6802             LDR      R2,[R0, #+0]
   \       0xCE   0x06D2             LSLS     R2,R2,#+27
   \       0xD0   0xD504             BPL.N    ??main_10
     61                  GPIOD_BSRR |= 0x00100000; // PD4 LED OFF
   \       0xD2   0x680A             LDR      R2,[R1, #+0]
   \       0xD4   0xF452 0x1280      ORRS     R2,R2,#0x100000
   \       0xD8   0x600A             STR      R2,[R1, #+0]
   \       0xDA   0xE003             B.N      ??main_11
     62                }
     63                else { // IF PD4 LED OFF
     64                  GPIOD_BSRR |= 0x00000010; // PD4 LED ON
   \                     ??main_10: (+1)
   \       0xDC   0x680A             LDR      R2,[R1, #+0]
   \       0xDE   0xF052 0x0210      ORRS     R2,R2,#0x10
   \       0xE2   0x600A             STR      R2,[R1, #+0]
     65                }
     66                  
     67                if (GPIOD_ODR & 0x00000080) { // IF PD7 LED ON
   \                     ??main_11: (+1)
   \       0xE4   0x6800             LDR      R0,[R0, #+0]
   \       0xE6   0x0600             LSLS     R0,R0,#+24
   \       0xE8   0xD504             BPL.N    ??main_12
     68                  GPIOD_BSRR |= 0x00800000; // PD7 LED OFF
   \       0xEA   0x6808             LDR      R0,[R1, #+0]
   \       0xEC   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \       0xF0   0x6008             STR      R0,[R1, #+0]
   \       0xF2   0xE003             B.N      ??main_13
     69                }
     70                else { // IF PD7 LED OFF
     71                  GPIOD_BSRR |= 0x00000080; // PD7 LED ON
   \                     ??main_12: (+1)
   \       0xF4   0x6808             LDR      R0,[R1, #+0]
   \       0xF6   0xF050 0x0080      ORRS     R0,R0,#0x80
   \       0xFA   0x6008             STR      R0,[R1, #+0]
     72                }
     73                isSelect = 1;
   \                     ??main_13: (+1)
   \       0xFC   0x2001             MOVS     R0,#+1
   \       0xFE   0xE79B             B.N      ??main_1
   \                     ??main_0:
   \      0x100   0x4002'1018        DC32     0x40021018
   \      0x104   0x4001'0C04        DC32     0x40010c04
   \      0x108   0x4001'1000        DC32     0x40011000
   \      0x10C   0x4001'1400        DC32     0x40011400
   \      0x110   0x4444'4448        DC32     0x44444448
   \      0x114   0x4488'8844        DC32     0x44888844
   \      0x118   0x3443'3344        DC32     0x34433344
   \      0x11C   0x4001'1410        DC32     0x40011410
   \      0x120   0x4001'1008        DC32     0x40011008
   \      0x124   0x4001'0C08        DC32     0x40010c08
   \      0x128   0x4001'140C        DC32     0x4001140c
     74              }
     75              
     76            }
     77            
     78            return 0;
                   ^
Warning[Pe111]: statement is unreachable
     79          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   main


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     300  main

 
 300 bytes in section .text
 
 300 bytes of CODE memory

Errors: none
Warnings: 1
