###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         07/Dec/2022  03:19:01
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\servo.c
#    Command line                 =
#        -f
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user\servo.o.rsp
#        (C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\servo.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\List\user
#        -o
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\
#        -I
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\inc\
#        -Ol -I "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user\servo.o.d
#    Locale                       =  C
#    List file                    =
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\List\user\servo.lst
#    Object file                  =
#        C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\Debug\Obj\user\servo.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __iar_require _Printf         
#      __size_limit               =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\ZETA\Desktop\EMB\embedded_system_design\PROJECT\termp\user\servo.c
      1          #include "servo.h"
      2          
      3          /*void SERVO_RCC_Configure() {
      4              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
      5              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
      6              //  APB1 clock (TIM2,4) enable
      7              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
      8              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
      9              //  APB2
     10              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
     11              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     12          }
     13          
     14          void SERVO_GPIO_Configure() {
     15              /*GPIO_InitTypeDef GPIO_A;
                     ^
Warning[Pe009]: nested comment is not allowed
     16              GPIO_InitTypeDef GPIO_B; 
     17          
     18              // PA0, PA6
     19              GPIO_A.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_6;
     20              GPIO_A.GPIO_Speed = GPIO_Speed_50MHz;
     21              GPIO_A.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function
     22              GPIO_Init(GPIOA, &GPIO_A);
     23          
     24              // PB6
     25              GPIO_B.GPIO_Pin = GPIO_Pin_6;
     26              GPIO_B.GPIO_Speed = GPIO_Speed_50MHz;
     27              GPIO_B.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function
     28              GPIO_Init(GPIOB, &GPIO_B);
     29          }*/
     30          

   \                                 In section .text, align 2, keep-with-next
     31          void SERVO_Configure(PWM* pwm){
   \                     SERVO_Configure: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x0004             MOVS     R4,R0
     32              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x2004             MOVS     R0,#+4
   \        0xA   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     33              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \        0xE   0x2101             MOVS     R1,#+1
   \       0x10   0x2008             MOVS     R0,#+8
   \       0x12   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     34              //  APB1 clock (TIM2,4) enable
     35              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \       0x16   0x2101             MOVS     R1,#+1
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     36              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \       0x1E   0x2101             MOVS     R1,#+1
   \       0x20   0x2004             MOVS     R0,#+4
   \       0x22   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     37              //  APB2
     38              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0x2020             MOVS     R0,#+32
   \       0x2A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     39              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \       0x2E   0x2101             MOVS     R1,#+1
   \       0x30   0x2001             MOVS     R0,#+1
   \       0x32   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     40            
     41              GPIO_InitTypeDef GPIO_InitStructure; 
     42              GPIO_InitStructure.GPIO_Pin = pwm->gpio_pin;
   \       0x36   0x8B20             LDRH     R0,[R4, #+24]
   \       0x38   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     43              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x3C   0x2003             MOVS     R0,#+3
   \       0x3E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     44              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function
   \       0x42   0x2018             MOVS     R0,#+24
   \       0x44   0xF88D 0x0003      STRB     R0,[SP, #+3]
     45              GPIO_Init(GPIOB, &GPIO_InitStructure);
   \       0x48   0x4669             MOV      R1,SP
   \       0x4A   0x....             LDR.N    R0,??DataTable1
   \       0x4C   0x.... 0x....      BL       GPIO_Init
     46              
     47              TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     48              TIM_OCInitTypeDef TIM_OCInitStructure;
     49          
     50              // TIMER
     51              TIM_TimeBaseStructure.TIM_Period= 20000-1;
   \       0x50   0xF644 0x601F      MOVW     R0,#+19999
   \       0x54   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     52              TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t)(SystemCoreClock/1000000)-1;
   \       0x58   0x....             LDR.N    R0,??DataTable1_1
   \       0x5A   0x6800             LDR      R0,[R0, #+0]
   \       0x5C   0x....             LDR.N    R1,??DataTable1_2
   \       0x5E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x62   0x1E40             SUBS     R0,R0,#+1
   \       0x64   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     53              TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     54              TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x6E   0x2010             MOVS     R0,#+16
   \       0x70   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     55              TIM_TimeBaseInit(pwm->timer, &TIM_TimeBaseStructure);
   \       0x74   0xA901             ADD      R1,SP,#+4
   \       0x76   0x68E0             LDR      R0,[R4, #+12]
   \       0x78   0x.... 0x....      BL       TIM_TimeBaseInit
     56          
     57              // PWM init
     58              TIM_OCInitStructure.TIM_OCMode      = pwm -> OCMode;
   \       0x7C   0x88A0             LDRH     R0,[R4, #+4]
   \       0x7E   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     59              TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     60              TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x88   0x2001             MOVS     R0,#+1
   \       0x8A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     61              TIM_OCInitStructure.TIM_Pulse       = 1500;
   \       0x8E   0xF240 0x50DC      MOVW     R0,#+1500
   \       0x92   0xF8AD 0x0016      STRH     R0,[SP, #+22]
     62              
     63                 printf("%d \n", pwm->channel);
   \       0x96   0x6821             LDR      R1,[R4, #+0]
   \       0x98   0x....             LDR.N    R0,??DataTable1_3
   \       0x9A   0x.... 0x....      BL       printf
     64              
     65              // TODO: 채널 분리 작동 안 됨
     66              switch(pwm->channel){
   \       0x9E   0x6820             LDR      R0,[R4, #+0]
   \       0xA0   0x2803             CMP      R0,#+3
   \       0xA2   0xD002             BEQ.N    ??SERVO_Configure_0
   \       0xA4   0x2804             CMP      R0,#+4
   \       0xA6   0xD00C             BEQ.N    ??SERVO_Configure_1
   \       0xA8   0xE017             B.N      ??SERVO_Configure_2
     67              case 3:
     68                TIM_OC3Init(pwm->timer, &TIM_OCInitStructure);
   \                     ??SERVO_Configure_0: (+1)
   \       0xAA   0xA904             ADD      R1,SP,#+16
   \       0xAC   0x68E0             LDR      R0,[R4, #+12]
   \       0xAE   0x.... 0x....      BL       TIM_OC3Init
     69                 printf("yes3 \n");
   \       0xB2   0x....             LDR.N    R0,??DataTable1_4
   \       0xB4   0x.... 0x....      BL       printf
     70                TIM_OC3PreloadConfig(pwm->timer, TIM_OCPreload_Disable);
   \       0xB8   0x2100             MOVS     R1,#+0
   \       0xBA   0x68E0             LDR      R0,[R4, #+12]
   \       0xBC   0x.... 0x....      BL       TIM_OC3PreloadConfig
     71                break;
   \       0xC0   0xE00B             B.N      ??SERVO_Configure_3
     72              case 4:
     73                TIM_OC4Init(pwm->timer, &TIM_OCInitStructure);
   \                     ??SERVO_Configure_1: (+1)
   \       0xC2   0xA904             ADD      R1,SP,#+16
   \       0xC4   0x68E0             LDR      R0,[R4, #+12]
   \       0xC6   0x.... 0x....      BL       TIM_OC4Init
     74                 printf("yes4 \n");
   \       0xCA   0x....             LDR.N    R0,??DataTable1_5
   \       0xCC   0x.... 0x....      BL       printf
     75                TIM_OC4PreloadConfig(pwm->timer, TIM_OCPreload_Disable);
   \       0xD0   0x2100             MOVS     R1,#+0
   \       0xD2   0x68E0             LDR      R0,[R4, #+12]
   \       0xD4   0x.... 0x....      BL       TIM_OC4PreloadConfig
     76                break;
   \       0xD8   0xE7FF             B.N      ??SERVO_Configure_3
     77              default:
     78                break;
     79              }
     80              
     81              TIM_ARRPreloadConfig(pwm->timer, ENABLE);
   \                     ??SERVO_Configure_2: (+1)
   \                     ??SERVO_Configure_3: (+1)
   \       0xDA   0x2101             MOVS     R1,#+1
   \       0xDC   0x68E0             LDR      R0,[R4, #+12]
   \       0xDE   0x.... 0x....      BL       TIM_ARRPreloadConfig
     82              TIM_Cmd(pwm->timer,ENABLE);
   \       0xE2   0x2101             MOVS     R1,#+1
   \       0xE4   0x68E0             LDR      R0,[R4, #+12]
   \       0xE6   0x.... 0x....      BL       TIM_Cmd
     83              //TIM_ITConfig(pwm->timer, TIM_IT_Update, ENABLE);
     84          }
   \       0xEA   0xB008             ADD      SP,SP,#+32
   \       0xEC   0xBD10             POP      {R4,PC}
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void SERVO_Rotate(PWM* pwm, int degree){
   \                     SERVO_Rotate: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
     87              // 0 ~ 180 degree movement
     88              int pwm_pulse = ((2300 - 700) / 180) * (degree - 15) + 700;
   \        0x2   0x00C9             LSLS     R1,R1,#+3
   \        0x4   0xF511 0x7111      ADDS     R1,R1,#+580
     89              TIM_OCInitTypeDef tim_oc_init_struct;
     90              tim_oc_init_struct.TIM_OCMode      = pwm->OCMode;
   \        0x8   0x8882             LDRH     R2,[R0, #+4]
   \        0xA   0xF8AD 0x2000      STRH     R2,[SP, #+0]
     91              tim_oc_init_struct.TIM_OCPolarity  = TIM_OCPolarity_High;
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0xF8AD 0x2008      STRH     R2,[SP, #+8]
     92              tim_oc_init_struct.TIM_OutputState = TIM_OutputState_Enable;
   \       0x14   0x2201             MOVS     R2,#+1
   \       0x16   0xF8AD 0x2002      STRH     R2,[SP, #+2]
     93              tim_oc_init_struct.TIM_Pulse       = pwm_pulse;
   \       0x1A   0xF8AD 0x1006      STRH     R1,[SP, #+6]
     94              // 딜레이 꼭 넣어줄 것
     95              switch(pwm->channel){
   \       0x1E   0x6801             LDR      R1,[R0, #+0]
   \       0x20   0x2903             CMP      R1,#+3
   \       0x22   0xD002             BEQ.N    ??SERVO_Rotate_0
   \       0x24   0x2904             CMP      R1,#+4
   \       0x26   0xD008             BEQ.N    ??SERVO_Rotate_1
   \       0x28   0xE00F             B.N      ??SERVO_Rotate_2
     96              case 3:
     97                TIM_OC3Init(pwm->timer, &tim_oc_init_struct);
   \                     ??SERVO_Rotate_0: (+1)
   \       0x2A   0x4669             MOV      R1,SP
   \       0x2C   0x68C0             LDR      R0,[R0, #+12]
   \       0x2E   0x.... 0x....      BL       TIM_OC3Init
     98                 printf("반복3 \n");
   \       0x32   0x....             LDR.N    R0,??DataTable1_6
   \       0x34   0x.... 0x....      BL       printf
     99                break;
   \       0x38   0xE007             B.N      ??SERVO_Rotate_3
    100              case 4:
    101                TIM_OC4Init(pwm->timer, &tim_oc_init_struct);
   \                     ??SERVO_Rotate_1: (+1)
   \       0x3A   0x4669             MOV      R1,SP
   \       0x3C   0x68C0             LDR      R0,[R0, #+12]
   \       0x3E   0x.... 0x....      BL       TIM_OC4Init
    102                 printf("반복4 \n");
   \       0x42   0x....             LDR.N    R0,??DataTable1_7
   \       0x44   0x.... 0x....      BL       printf
    103                break;
   \       0x48   0xE7FF             B.N      ??SERVO_Rotate_3
    104              default:
    105                break;
    106              }
    107          }
   \                     ??SERVO_Rotate_2: (+1)
   \                     ??SERVO_Rotate_3: (+1)
   \       0x4A   0xB005             ADD      SP,SP,#+20
   \       0x4C   0xBD00             POP      {PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x25 0x64          DC8 "%d \012"

   \              0x20 0x0A    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x79 0x65          DC8 "yes3 \012"

   \              0x73 0x33    

   \              0x20 0x0A    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x79 0x65          DC8 "yes4 \012"

   \              0x73 0x34    

   \              0x20 0x0A    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0xB9 0xDD          DC8 "\271\335\272\2713 \012"

   \              0xBA 0xB9    

   \              0x33 0x20    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0xB9 0xDD          DC8 "\271\335\272\2714 \012"

   \              0xBA 0xB9    

   \              0x34 0x20    

   \              0x0A 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   SERVO_Configure
        40   -> GPIO_Init
        40   -> RCC_APB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_OC3Init
        40   -> TIM_OC3PreloadConfig
        40   -> TIM_OC4Init
        40   -> TIM_OC4PreloadConfig
        40   -> TIM_TimeBaseInit
        40   -> printf
      24   SERVO_Rotate
        24   -> TIM_OC3Init
        24   -> TIM_OC4Init
        24   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
       8  ?_4
     238  SERVO_Configure
      78  SERVO_Rotate

 
  40 bytes in section .rodata
 348 bytes in section .text
 
 348 bytes of CODE  memory
  40 bytes of CONST memory

Errors: none
Warnings: 1
