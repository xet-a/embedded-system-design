###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       18/Dec/2022  18:26:06
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\bluetooth.c
#    Command line =  
#        -f C:\Users\pnu4\AppData\Local\Temp\EWC3A3.tmp
#        (C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\bluetooth.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\List
#        -o
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\inc\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\List\bluetooth.lst
#    Object file  =  
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\Obj\bluetooth.o
#
###############################################################################

C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\bluetooth.c
      1          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x....             LDR.N    R1,??DataTable3  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
      2          #include "bluetooth.h"
      3          
      4          
      5          void bt_init(BTConfig *config);
      6          int bt_send_data(const char *data, BTConfig *config);
      7          

   \                                 In section .text, align 2, keep-with-next
      8          void BT_RCC_Configure(void) {  
   \                     BT_RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      9              /* UART TX/RX port clock enable */
     10              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); 
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     11              /* USART1 clock enable */
     12              RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);	
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF44F 0x4080      MOV      R0,#+16384
   \   00000010   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     13              /* USART2 clock enable */
     14              RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000001A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     15              /* Alternate Function IO clock enable */
     16              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     17          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void BT_GPIO_Configure(void) {
   \                     BT_GPIO_Configure: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     20              /* UART1 pin setting */
     21              //TX
     22              GPIO_InitTypeDef GPIO_InitStructure_TX;
     23              GPIO_InitStructure_TX.GPIO_Pin = GPIO_Pin_9;
   \   00000002   0xF44F 0x7000      MOV      R0,#+512
   \   00000006   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     24              GPIO_InitStructure_TX.GPIO_Speed = GPIO_Speed_50MHz;   
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     25              GPIO_InitStructure_TX.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000010   0x2018             MOVS     R0,#+24
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
     26              GPIO_Init(GPIOA, &GPIO_InitStructure_TX);
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40010800
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     27              //RX
     28              GPIO_InitTypeDef GPIO_InitStructure_RX;
     29              GPIO_InitStructure_RX.GPIO_Pin = GPIO_Pin_10;
   \   0000001E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000022   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     30              GPIO_InitStructure_RX.GPIO_Mode = GPIO_Mode_IPU|GPIO_Mode_IPD;
                                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000026   0x2068             MOVS     R0,#+104
   \   00000028   0xF88D 0x0007      STRB     R0,[SP, #+7]
     31              GPIO_Init(GPIOA, &GPIO_InitStructure_RX);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40010800
   \   00000030   0x.... 0x....      BL       GPIO_Init
     32              
     33              /* UART2 pin setting */
     34              //TX
     35              GPIO_InitStructure_TX.GPIO_Pin = GPIO_Pin_2;
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     36              GPIO_InitStructure_TX.GPIO_Speed = GPIO_Speed_50MHz;   
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     37              GPIO_InitStructure_TX.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000040   0x2018             MOVS     R0,#+24
   \   00000042   0xF88D 0x0003      STRB     R0,[SP, #+3]
     38              GPIO_Init(GPIOA, &GPIO_InitStructure_TX);  
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40010800
   \   0000004A   0x.... 0x....      BL       GPIO_Init
     39              //RX
     40              GPIO_InitStructure_RX.GPIO_Pin = GPIO_Pin_3;
   \   0000004E   0x2008             MOVS     R0,#+8
   \   00000050   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     41              GPIO_InitStructure_RX.GPIO_Mode = GPIO_Mode_IPU|GPIO_Mode_IPD;
                                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000054   0x2068             MOVS     R0,#+104
   \   00000056   0xF88D 0x0007      STRB     R0,[SP, #+7]
     42              GPIO_Init(GPIOA, &GPIO_InitStructure_RX);
   \   0000005A   0xA901             ADD      R1,SP,#+4
   \   0000005C   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40010800
   \   0000005E   0x.... 0x....      BL       GPIO_Init
     43          }
   \   00000062   0xBD07             POP      {R0-R2,PC}       ;; return
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void BT_UART_Configure(void) {
   \                     BT_UART_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
     46              USART_InitTypeDef USART1_InitStructure;
     47              USART_InitTypeDef USART2_InitStructure;
     48          
     49              USART1_InitStructure.USART_BaudRate = 9600;                                      
   \   00000004   0xF44F 0x5016      MOV      R0,#+9600
   \   00000008   0x9004             STR      R0,[SP, #+16]
     50              USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;   
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF8AD 0x001C      STRH     R0,[SP, #+28]
     51              USART1_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;  
   \   00000010   0x200C             MOVS     R0,#+12
   \   00000012   0xF8AD 0x001A      STRH     R0,[SP, #+26]
     52              USART1_InitStructure.USART_Parity = USART_Parity_No;                                  
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     53              USART1_InitStructure.USART_StopBits = USART_StopBits_1;                               
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0016      STRH     R0,[SP, #+22]
     54              USART1_InitStructure.USART_WordLength = USART_WordLength_8b;                          
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     55              USART_Init(USART1, &USART1_InitStructure);
   \   00000028   0xA904             ADD      R1,SP,#+16
   \   0000002A   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40013800
   \   0000002C   0x.... 0x....      BL       USART_Init
     56          
     57              USART2_InitStructure.USART_BaudRate = 9600;                                      
   \   00000030   0xF44F 0x5016      MOV      R0,#+9600
   \   00000034   0x9000             STR      R0,[SP, #+0]
     58              USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;   
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     59              USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;  
   \   0000003C   0x200C             MOVS     R0,#+12
   \   0000003E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     60              USART2_InitStructure.USART_Parity = USART_Parity_No;                                  
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     61              USART2_InitStructure.USART_StopBits = USART_StopBits_1;                               
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     62              USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     63              USART_Init(USART2, &USART2_InitStructure); 
   \   00000054   0x4669             MOV      R1,SP
   \   00000056   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40004400
   \   00000058   0x.... 0x....      BL       USART_Init
     64          
     65              // Enable the USART peripheral
     66              USART_Cmd(USART1, ENABLE);
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40013800
   \   00000060   0x.... 0x....      BL       USART_Cmd
     67              USART_Cmd(USART2, ENABLE);
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40004400
   \   00000068   0x.... 0x....      BL       USART_Cmd
     68          
     69              // Enable the USART RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
     70              USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \   0000006C   0x2201             MOVS     R2,#+1
   \   0000006E   0xF240 0x5125      MOVW     R1,#+1317
   \   00000072   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40013800
   \   00000074   0x.... 0x....      BL       USART_ITConfig
     71              USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);      
   \   00000078   0x2201             MOVS     R2,#+1
   \   0000007A   0xF240 0x5125      MOVW     R1,#+1317
   \   0000007E   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40004400
   \   00000080   0x.... 0x....      BL       USART_ITConfig
     72          }
   \   00000084   0xB009             ADD      SP,SP,#+36
   \   00000086   0xBD00             POP      {PC}             ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void BT_NVIC_Configure(void) {
   \                     BT_NVIC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     75              NVIC_InitTypeDef NVIC_InitStructure;
     76              //NVIC_PriorityGroupConfig(NVIC_PriorityGroup2);
     77          
     78              // 'NVIC_EnableIRQ' is only required for USART setting
     79              NVIC_EnableIRQ(USART1_IRQn);
   \   00000002   0x2025             MOVS     R0,#+37
   \   00000004   0x.... 0x....      BL       __NVIC_EnableIRQ
     80              NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
   \   00000008   0x2025             MOVS     R0,#+37
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
     81              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01 ;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0001      STRB     R0,[SP, #+1]
     82              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF88D 0x0002      STRB     R0,[SP, #+2]
     83              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     84              NVIC_Init(&NVIC_InitStructure);
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       NVIC_Init
     85          
     86              NVIC_EnableIRQ(USART2_IRQn);
   \   00000026   0x2026             MOVS     R0,#+38
   \   00000028   0x.... 0x....      BL       __NVIC_EnableIRQ
     87              NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   0000002C   0x2026             MOVS     R0,#+38
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
     88              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01 ;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xF88D 0x0001      STRB     R0,[SP, #+1]
     89              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     90              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xF88D 0x0003      STRB     R0,[SP, #+3]
     91              NVIC_Init(&NVIC_InitStructure);
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x.... 0x....      BL       NVIC_Init
     92          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void BT_init(BTConfig *config){
   \                     BT_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     95              config->isValid = false;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
     96              config->isATscan = false;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x7041             STRB     R1,[R0, #+1]
     97              BT_RCC_Configure();
   \   0000000A   0x.... 0x....      BL       BT_RCC_Configure
     98              BT_GPIO_Configure();
   \   0000000E   0x.... 0x....      BL       BT_GPIO_Configure
     99              BT_UART_Configure();
   \   00000012   0x.... 0x....      BL       BT_UART_Configure
    100              BT_NVIC_Configure();  
   \   00000016   0x.... 0x....      BL       BT_NVIC_Configure
    101          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          int BT_send_data(const char *data, BTConfig *config){
   \                     BT_send_data: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    104              int i = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    105              // @@@@ @@ @@
    106              if(config->isValid == false) return 0;
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??BT_send_data_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE019             B.N      ??BT_send_data_1
    107              
    108              for(i=0; i<strlen(data); i++){
   \                     ??BT_send_data_0: (+1)
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0xE008             B.N      ??BT_send_data_2
    109                  USART_SendData(USART2, data[i]);
   \                     ??BT_send_data_3: (+1)
   \   00000016   0x5DA1             LDRB     R1,[R4, R6]
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40004400
   \   0000001C   0x.... 0x....      BL       USART_SendData
    110                  delay_ms(10);
                         ^
Warning[Pe223]: function "delay_ms" declared implicitly
   \   00000020   0x200A             MOVS     R0,#+10
   \   00000022   0x.... 0x....      BL       delay_ms
    111              }
   \   00000026   0x1C76             ADDS     R6,R6,#+1
   \                     ??BT_send_data_2: (+1)
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       strlen
   \   0000002E   0x4286             CMP      R6,R0
   \   00000030   0xD3F1             BCC.N    ??BT_send_data_3
    112              USART_SendData(USART2, '\r');
   \   00000032   0x210D             MOVS     R1,#+13
   \   00000034   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40004400
   \   00000036   0x.... 0x....      BL       USART_SendData
    113              delay_ms(10);
                     ^
Warning[Pe223]: function "delay_ms" declared implicitly
   \   0000003A   0x200A             MOVS     R0,#+10
   \   0000003C   0x.... 0x....      BL       delay_ms
    114              config->isValid = false;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x7028             STRB     R0,[R5, #+0]
    115              return 1;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??BT_send_data_1: (+1)
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    116          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40004400         DC32     0x40004400

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   BT_GPIO_Configure
        16   -> GPIO_Init
       8   BT_NVIC_Configure
         8   -> NVIC_Init
         8   -> __NVIC_EnableIRQ
       8   BT_RCC_Configure
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      40   BT_UART_Configure
        40   -> USART_Cmd
        40   -> USART_ITConfig
        40   -> USART_Init
       8   BT_init
         8   -> BT_GPIO_Configure
         8   -> BT_NVIC_Configure
         8   -> BT_RCC_Configure
         8   -> BT_UART_Configure
      16   BT_send_data
        16   -> USART_SendData
        16   -> delay_ms
        16   -> strlen
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
     100  BT_GPIO_Configure
      76  BT_NVIC_Configure
      40  BT_RCC_Configure
     136  BT_UART_Configure
      28  BT_init
      72  BT_send_data
      28  __NVIC_EnableIRQ

 
 496 bytes in section .text
 
 496 bytes of CODE memory

Errors: none
Warnings: 4
