###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       18/Dec/2022  21:40:01
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\servo.c
#    Command line =  
#        -f C:\Users\pnu4\AppData\Local\Temp\EW5699.tmp
#        (C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\servo.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\List
#        -o
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\
#        -I
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\inc\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\List\servo.lst
#    Object file  =  
#        C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\Debug\Obj\servo.o
#
###############################################################################

C:\Users\pnu4\Downloads\embedded_system_design-lab\PROJECT\termp_o\user\servo.c
      1          #include "servo.h"
      2          
      3          /*void SERVO_RCC_Configure() {
      4              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
      5              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
      6              //  APB1 clock (TIM2,4) enable
      7              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
      8              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
      9              //  APB2
     10              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
     11              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     12          }
     13          
     14          void SERVO_GPIO_Configure() {
     15              /*GPIO_InitTypeDef GPIO_A;
                     ^
Warning[Pe009]: nested comment is not allowed
     16              GPIO_InitTypeDef GPIO_B; 
     17          
     18              // PA0, PA6
     19              GPIO_A.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_6;
     20              GPIO_A.GPIO_Speed = GPIO_Speed_50MHz;
     21              GPIO_A.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function
     22              GPIO_Init(GPIOA, &GPIO_A);
     23          
     24              // PB6
     25              GPIO_B.GPIO_Pin = GPIO_Pin_6;
     26              GPIO_B.GPIO_Speed = GPIO_Speed_50MHz;
     27              GPIO_B.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function
     28              GPIO_Init(GPIOB, &GPIO_B);
     29          }*/
     30          

   \                                 In section .text, align 2, keep-with-next
     31          void SERVO_Configure(PWM* pwm){
   \                     SERVO_Configure: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
     32              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     33              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x2008             MOVS     R0,#+8
   \   00000012   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     34              //  APB1 clock (TIM2,4) enable
     35              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     36              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     37              //  APB2
     38              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2020             MOVS     R0,#+32
   \   0000002A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     39              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     40            
     41              GPIO_InitTypeDef GPIO_InitStructure; 
     42              GPIO_InitStructure.GPIO_Pin = pwm->gpio_pin;
   \   00000036   0x8B20             LDRH     R0,[R4, #+24]
   \   00000038   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     43              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     44              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function
   \   00000042   0x2018             MOVS     R0,#+24
   \   00000044   0xF88D 0x0003      STRB     R0,[SP, #+3]
     45              GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x....             LDR.N    R0,??DataTable1  ;; 0x40010c00
   \   0000004C   0x.... 0x....      BL       GPIO_Init
     46              
     47              TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     48              TIM_OCInitTypeDef TIM_OCInitStructure;
     49          
     50              // TIMER
     51              TIM_TimeBaseStructure.TIM_Period= 20000-1;
   \   00000050   0xF644 0x601F      MOVW     R0,#+19999
   \   00000054   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     52              TIM_TimeBaseStructure.TIM_Prescaler= (uint16_t)(SystemCoreClock/1000000)-1;
   \   00000058   0x....             LDR.N    R0,??DataTable1_1
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x....             LDR.N    R1,??DataTable1_2  ;; 0xf4240
   \   0000005E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000062   0x1E40             SUBS     R0,R0,#+1
   \   00000064   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     53              TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xF8AD 0x001A      STRH     R0,[SP, #+26]
     54              TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \   0000006E   0x2010             MOVS     R0,#+16
   \   00000070   0xF8AD 0x0016      STRH     R0,[SP, #+22]
     55              TIM_TimeBaseInit(pwm->timer, &TIM_TimeBaseStructure);
   \   00000074   0xA905             ADD      R1,SP,#+20
   \   00000076   0x68E0             LDR      R0,[R4, #+12]
   \   00000078   0x.... 0x....      BL       TIM_TimeBaseInit
     56                
     57              // PWM init
     58              TIM_OCInitStructure.TIM_OCMode      = pwm -> OCMode;
   \   0000007C   0x88A0             LDRH     R0,[R4, #+4]
   \   0000007E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     59              TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     60              TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     61              TIM_OCInitStructure.TIM_Pulse       = 1500;
   \   0000008E   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000092   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     62              
     63              printf("channel : %d \n", pwm->channel);
   \   00000096   0x6821             LDR      R1,[R4, #+0]
   \   00000098   0x....             LDR.N    R0,??DataTable1_3
   \   0000009A   0x.... 0x....      BL       printf
     64              
     65              // TODO: @@ @@ @@ @ @
     66              switch(pwm->channel){
   \   0000009E   0x6820             LDR      R0,[R4, #+0]
   \   000000A0   0x2801             CMP      R0,#+1
   \   000000A2   0xD006             BEQ.N    ??SERVO_Configure_0
   \   000000A4   0xD335             BCC.N    ??SERVO_Configure_1
   \   000000A6   0x2803             CMP      R0,#+3
   \   000000A8   0xD01B             BEQ.N    ??SERVO_Configure_2
   \   000000AA   0xD30E             BCC.N    ??SERVO_Configure_3
   \   000000AC   0x2804             CMP      R0,#+4
   \   000000AE   0xD024             BEQ.N    ??SERVO_Configure_4
   \   000000B0   0xE02F             B.N      ??SERVO_Configure_1
     67              case 1:
     68                TIM_OC1Init(pwm->timer, &TIM_OCInitStructure);
   \                     ??SERVO_Configure_0: (+1)
   \   000000B2   0xA901             ADD      R1,SP,#+4
   \   000000B4   0x68E0             LDR      R0,[R4, #+12]
   \   000000B6   0x.... 0x....      BL       TIM_OC1Init
     69                 printf("yes1 \n");
   \   000000BA   0x....             LDR.N    R0,??DataTable1_4
   \   000000BC   0x.... 0x....      BL       printf
     70                TIM_OC1PreloadConfig(pwm->timer, TIM_OCPreload_Disable);
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x68E0             LDR      R0,[R4, #+12]
   \   000000C4   0x.... 0x....      BL       TIM_OC1PreloadConfig
     71                break;
   \   000000C8   0xE023             B.N      ??SERVO_Configure_5
     72              case 2:
     73                TIM_OC2Init(pwm->timer, &TIM_OCInitStructure);
   \                     ??SERVO_Configure_3: (+1)
   \   000000CA   0xA901             ADD      R1,SP,#+4
   \   000000CC   0x68E0             LDR      R0,[R4, #+12]
   \   000000CE   0x.... 0x....      BL       TIM_OC2Init
     74                 printf("yes2 \n");
   \   000000D2   0x....             LDR.N    R0,??DataTable1_5
   \   000000D4   0x.... 0x....      BL       printf
     75                TIM_OC2PreloadConfig(pwm->timer, TIM_OCPreload_Disable);
   \   000000D8   0x2100             MOVS     R1,#+0
   \   000000DA   0x68E0             LDR      R0,[R4, #+12]
   \   000000DC   0x.... 0x....      BL       TIM_OC2PreloadConfig
     76                break;
   \   000000E0   0xE017             B.N      ??SERVO_Configure_5
     77              case 3:
     78                TIM_OC3Init(pwm->timer, &TIM_OCInitStructure);
   \                     ??SERVO_Configure_2: (+1)
   \   000000E2   0xA901             ADD      R1,SP,#+4
   \   000000E4   0x68E0             LDR      R0,[R4, #+12]
   \   000000E6   0x.... 0x....      BL       TIM_OC3Init
     79                 printf("yes3 \n");
   \   000000EA   0x....             LDR.N    R0,??DataTable1_6
   \   000000EC   0x.... 0x....      BL       printf
     80                TIM_OC3PreloadConfig(pwm->timer, TIM_OCPreload_Disable);
   \   000000F0   0x2100             MOVS     R1,#+0
   \   000000F2   0x68E0             LDR      R0,[R4, #+12]
   \   000000F4   0x.... 0x....      BL       TIM_OC3PreloadConfig
     81                break;
   \   000000F8   0xE00B             B.N      ??SERVO_Configure_5
     82              case 4:
     83                TIM_OC4Init(pwm->timer, &TIM_OCInitStructure);
   \                     ??SERVO_Configure_4: (+1)
   \   000000FA   0xA901             ADD      R1,SP,#+4
   \   000000FC   0x68E0             LDR      R0,[R4, #+12]
   \   000000FE   0x.... 0x....      BL       TIM_OC4Init
     84                 printf("yes4 \n");
   \   00000102   0x....             LDR.N    R0,??DataTable1_7
   \   00000104   0x.... 0x....      BL       printf
     85                TIM_OC4PreloadConfig(pwm->timer, TIM_OCPreload_Disable);
   \   00000108   0x2100             MOVS     R1,#+0
   \   0000010A   0x68E0             LDR      R0,[R4, #+12]
   \   0000010C   0x.... 0x....      BL       TIM_OC4PreloadConfig
     86                break;
   \   00000110   0xE7FF             B.N      ??SERVO_Configure_5
     87              default:
     88                break;
     89              }
     90          
     91              
     92              TIM_ARRPreloadConfig(pwm->timer, ENABLE);
   \                     ??SERVO_Configure_1: (+1)
   \                     ??SERVO_Configure_5: (+1)
   \   00000112   0x2101             MOVS     R1,#+1
   \   00000114   0x68E0             LDR      R0,[R4, #+12]
   \   00000116   0x.... 0x....      BL       TIM_ARRPreloadConfig
     93              TIM_Cmd(pwm->timer,ENABLE);
   \   0000011A   0x2101             MOVS     R1,#+1
   \   0000011C   0x68E0             LDR      R0,[R4, #+12]
   \   0000011E   0x.... 0x....      BL       TIM_Cmd
     94              //TIM_ITConfig(pwm->timer, TIM_IT_Update, ENABLE);
     95          }
   \   00000122   0xB008             ADD      SP,SP,#+32
   \   00000124   0xBD10             POP      {R4,PC}          ;; return
     96          

   \                                 In section .text, align 2, keep-with-next
     97          void SERVO_Rotate(PWM* pwm, int degree){
   \                     SERVO_Rotate: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     98              // 0 ~ 180 degree movement
     99              int pwm_pulse = ((2300 - 700) / 180) * (degree - 15) + 700;
   \   00000002   0x00C9             LSLS     R1,R1,#+3
   \   00000004   0xF511 0x7111      ADDS     R1,R1,#+580
    100              TIM_OCInitTypeDef tim_oc_init_struct;
    101              tim_oc_init_struct.TIM_OCMode      = pwm->OCMode;
   \   00000008   0x8882             LDRH     R2,[R0, #+4]
   \   0000000A   0xF8AD 0x2000      STRH     R2,[SP, #+0]
    102              tim_oc_init_struct.TIM_OCPolarity  = TIM_OCPolarity_High;
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xF8AD 0x2008      STRH     R2,[SP, #+8]
    103              tim_oc_init_struct.TIM_OutputState = TIM_OutputState_Enable;
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0xF8AD 0x2002      STRH     R2,[SP, #+2]
    104              tim_oc_init_struct.TIM_Pulse       = pwm_pulse;
   \   0000001A   0xF8AD 0x1006      STRH     R1,[SP, #+6]
    105              // @@@ @ @@@ @
    106              switch(pwm->channel){
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0x2901             CMP      R1,#+1
   \   00000022   0xD006             BEQ.N    ??SERVO_Rotate_0
   \   00000024   0xD325             BCC.N    ??SERVO_Rotate_1
   \   00000026   0x2903             CMP      R1,#+3
   \   00000028   0xD013             BEQ.N    ??SERVO_Rotate_2
   \   0000002A   0xD30A             BCC.N    ??SERVO_Rotate_3
   \   0000002C   0x2904             CMP      R1,#+4
   \   0000002E   0xD018             BEQ.N    ??SERVO_Rotate_4
   \   00000030   0xE01F             B.N      ??SERVO_Rotate_1
    107              case 1:
    108                TIM_OC1Init(pwm->timer, &tim_oc_init_struct);
   \                     ??SERVO_Rotate_0: (+1)
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x68C0             LDR      R0,[R0, #+12]
   \   00000036   0x.... 0x....      BL       TIM_OC1Init
    109                 printf("R1 \n");
   \   0000003A   0x....             LDR.N    R0,??DataTable1_8
   \   0000003C   0x.... 0x....      BL       printf
    110                break;
   \   00000040   0xE017             B.N      ??SERVO_Rotate_5
    111              case 2:
    112                TIM_OC2Init(pwm->timer, &tim_oc_init_struct);
   \                     ??SERVO_Rotate_3: (+1)
   \   00000042   0x4669             MOV      R1,SP
   \   00000044   0x68C0             LDR      R0,[R0, #+12]
   \   00000046   0x.... 0x....      BL       TIM_OC2Init
    113                 printf("R2 \n");
   \   0000004A   0x....             LDR.N    R0,??DataTable1_9
   \   0000004C   0x.... 0x....      BL       printf
    114                break;
   \   00000050   0xE00F             B.N      ??SERVO_Rotate_5
    115              case 3:
    116                TIM_OC3Init(pwm->timer, &tim_oc_init_struct);
   \                     ??SERVO_Rotate_2: (+1)
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x68C0             LDR      R0,[R0, #+12]
   \   00000056   0x.... 0x....      BL       TIM_OC3Init
    117                 printf("R3 \n");
   \   0000005A   0x....             LDR.N    R0,??DataTable1_10
   \   0000005C   0x.... 0x....      BL       printf
    118                break;
   \   00000060   0xE007             B.N      ??SERVO_Rotate_5
    119              case 4:
    120                TIM_OC4Init(pwm->timer, &tim_oc_init_struct);
   \                     ??SERVO_Rotate_4: (+1)
   \   00000062   0x4669             MOV      R1,SP
   \   00000064   0x68C0             LDR      R0,[R0, #+12]
   \   00000066   0x.... 0x....      BL       TIM_OC4Init
    121                 printf("R4 \n");
   \   0000006A   0x....             LDR.N    R0,??DataTable1_11
   \   0000006C   0x.... 0x....      BL       printf
    122                break;
   \   00000070   0xE7FF             B.N      ??SERVO_Rotate_5
    123              default:
    124                break;
    125              }
    126          }
   \                     ??SERVO_Rotate_1: (+1)
   \                     ??SERVO_Rotate_5: (+1)
   \   00000072   0xB005             ADD      SP,SP,#+20
   \   00000074   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x63 0x68          DC8 "channel : %d \012"
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x79 0x65          DC8 "yes1 \012"
   \              0x73 0x31    
   \              0x20 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x79 0x65          DC8 "yes2 \012"
   \              0x73 0x32    
   \              0x20 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x79 0x65          DC8 "yes3 \012"
   \              0x73 0x33    
   \              0x20 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x79 0x65          DC8 "yes4 \012"
   \              0x73 0x34    
   \              0x20 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x52 0x31          DC8 "R1 \012"
   \              0x20 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x52 0x32          DC8 "R2 \012"
   \              0x20 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x33          DC8 "R3 \012"
   \              0x20 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x52 0x34          DC8 "R4 \012"
   \              0x20 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   SERVO_Configure
        40   -> GPIO_Init
        40   -> RCC_APB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_OC1Init
        40   -> TIM_OC1PreloadConfig
        40   -> TIM_OC2Init
        40   -> TIM_OC2PreloadConfig
        40   -> TIM_OC3Init
        40   -> TIM_OC3PreloadConfig
        40   -> TIM_OC4Init
        40   -> TIM_OC4PreloadConfig
        40   -> TIM_TimeBaseInit
        40   -> printf
      24   SERVO_Rotate
        24   -> TIM_OC1Init
        24   -> TIM_OC2Init
        24   -> TIM_OC3Init
        24   -> TIM_OC4Init
        24   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      16  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
     294  SERVO_Configure
     118  SERVO_Rotate

 
  80 bytes in section .rodata
 460 bytes in section .text
 
 460 bytes of CODE  memory
  80 bytes of CONST memory

Errors: none
Warnings: 1
